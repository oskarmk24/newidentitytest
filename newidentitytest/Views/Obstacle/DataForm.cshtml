@model newidentitytest.Models.ObstacleData

@{
    ViewData["Title"] = "Register Obstacle";
}

<section class="mx-auto max-w-2xl">
    <div class="bg-white rounded-2xl shadow-sm ring-1 ring-gray-200 p-6">
        <header class="mb-6">
            <h1 class="text-2xl font-semibold">Obstacle Registration Form</h1>
            <p class="text-gray-600 mt-1">Please register an obstacle</p>
        </header>

        <!-- Skjema for å registrere hinder -->
        <form asp-action="DataForm" method="post" class="space-y-5">
            <!-- Viser feilmeldinger hvis valideringen feiler -->
            <div asp-validation-summary="ModelOnly" class="text-sm text-red-600"></div>

            <!-- Skjult input som lagrer posisjon fra kartet, trenger denne for at serveren skal vite hvor brukeren trykket på kartet -->
            <!-- Change input to visually hidden text so jQuery Validate doesn't ignore it -->
            <input type="text" asp-for="ObstacleLocation" id="ObstacleLocation"
                   style="position:absolute;left:-10000px;top:auto;width:1px;height:1px;overflow:hidden;"
                   aria-hidden="true" tabindex="-1" />
            <span asp-validation-for="ObstacleLocation" class="text-sm text-red-600"></span>

            <div class="grid gap-5 sm:grid-cols-2">
                <!-- Navn på hinder -->
                <div class="sm:col-span-2">
                    <label asp-for="ObstacleName" class="block text-sm font-medium text-gray-800 mb-1">Obstacle Name</label>
                    <input asp-for="ObstacleName"
                           class="block w-full rounded-lg border-gray-300 focus:border-indigo-600 focus:ring-indigo-600 px-3 py-2"
                           placeholder="e.g., Wall, Ramp" />
                    <span asp-validation-for="ObstacleName" class="text-sm text-red-600"></span>
                </div>

                <!-- Høyde på hinder -->
                <div>
                    <label class="block text-sm font-medium text-gray-800 mb-1">
                        Obstacle Height (<span id="unitText">Meters</span>)
                    </label>
                    <!-- Hidden, model-bound input stores meters for server-side validation -->
                    <input asp-for="ObstacleHeight" type="hidden" id="ObstacleHeight" />

                    <!-- Visible input the user interacts with; value shown in selected unit -->
                    <input id="ObstacleHeightDisplay" type="number" step="any"
                           class="block w-full rounded-md border-gray-300 focus:border-indigo-600 focus:ring-indigo-600 px-3 py-2 mb-2"
                           placeholder="e.g., 2.5" />

                    <!-- Simple on/off switch for ft/m -->
                    <div class="mt-1 flex items-center justify-start gap-2">
                        <label class="switch" title="Toggle feet/meters">
                            <input id="unitToggle" type="checkbox" aria-label="Toggle feet/meters">
                            <span class="slider round"></span>
                        </label>
                        <div class="text-xs text-gray-600 select-none">ft / m</div>
                    </div>

                    <span asp-validation-for="ObstacleHeight" class="text-sm text-red-600"></span>
                </div>
            </div>

            <!-- Beskrivelse av hinder -->
            <div class="sm:col-span-2">
                <label asp-for="ObstacleDescription" class="block text-sm font-medium text-gray-800 mb-1">Obstacle Description</label>
                <textarea asp-for="ObstacleDescription" rows="4"
                          class="block w-full rounded-lg border-gray-300 focus:border-indigo-600 focus:ring-indigo-600 px-3 py-2"
                          placeholder="Describe the obstacle, materials, location, etc."></textarea>
                <span asp-validation-for="ObstacleDescription" class="text-sm text-red-600"></span>
            </div>

            <!-- Knapp for å sende inn skjemaet -->
            <div class="pt-2">
                <button type="submit"
                        class="inline-flex items-center justify-center rounded-lg bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                    Submit Data
                </button>
            </div>
        </form>
    </div>
</section>


<!-- Kartseksjon for å velge posisjon -->
<section class="mx-auto max-w-2xl pt-6">
    <div class="bg-white rounded-2xl shadow-sm ring-1 ring-gray-200 p-6">
        <header class="mb-6">
            <h1 class="text-2xl font-semibold">Map</h1>
        </header>

        <!-- Selve kartet -->
        <div id="map"></div>

        <!-- Hint-tekst som oppdateres når bruker klikker i kartet -->
        <div id="coordsHint" class="mt-2 text-sm text-gray-600">Click the map to drop a pin.</div>
    </div>
</section>

<!-- Størrelse på kartet -->
<style>
    #map {
        height: 400px;
    }

    /* Toggle switch styles */
    .switch { position: relative; display: inline-block; width: 44px; height: 24px; }
    .switch input { opacity: 0; width: 0; height: 0; }
    .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #e5e7eb; transition: .2s; border-radius: 9999px; }
    .slider:before { position: absolute; content: ""; height: 20px; width: 20px; left: 2px; bottom: 2px; background-color: white; transition: .2s; border-radius: 9999px; box-shadow: 0 1px 2px rgba(0,0,0,0.15); }
    input:checked + .slider { background-color: #2563eb; }
    input:checked + .slider:before { transform: translateX(20px); }
</style>

@section Scripts {
    <!-- Script for klient-side validering -->
    <partial name="_ValidationScriptsPartial" />

    <!-- Laster inn filer fra JsDelivr CDN for marker lokasjon -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.85.1/dist/L.Control.Locate.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.85.1/dist/L.Control.Locate.min.js" charset="utf-8"></script>
    
    <script>
        // Include hidden inputs in client-side validation so ObstacleLocation (hidden) shows errors
        if (window.jQuery && jQuery.validator) {
            jQuery(function(){
                var $form = jQuery('form[method="post"][action$="DataForm"], form').first();
                var v = $form.data('validator');
                if (v && v.settings) { v.settings.ignore = ""; }
                else { jQuery.validator.setDefaults({ ignore: [] }); }
            });
        }
        // Starter kartet og setter standardvisning (Bergen)
        var map = L.map('map').setView([60.39, 5.32], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors',
            maxZoom: 16
        }).addTo(map);

        map.locate({ setView: true, maxZoom: 16 });

        // Holder referanse til markøren + skjult input
        var marker = null;
        var hidden = document.getElementById('ObstacleLocation');
        var hint = document.getElementById('coordsHint');

        // Lagrer posisjon i JSON-format i skjult input
        function setLocation(lat, lng) {
            var payload = {
                type: "Point",
                coordinates: [Number(lng.toFixed(6)), Number(lat.toFixed(6))]
            };
            hidden.value = JSON.stringify(payload);
            if (hint) {
                hint.textContent = "Selected: lat " + lat.toFixed(6) + ", lng " + lng.toFixed(6);
            }

        }

        // Plasserer eller flytter markør på kartet
        function placeOrMoveMarker(latlng) {
            if (!marker) {
                marker = L.marker(latlng, { draggable: true }).addTo(map);
                marker.on('dragend', function (e) {
                    var p = e.target.getLatLng();
                    setLocation(p.lat, p.lng);
                });
            } else {
                marker.setLatLng(latlng);
            }
            setLocation(latlng.lat, latlng.lng);
        }

        // Når brukeren klikker på kartet, plasser markør og oppdater skjult input
        map.on('click', function (e) {
            placeOrMoveMarker(e.latlng);
        });

        // Lokaliserer posisjon
        L.control.locate().addTo(map);


        // ----- Height unit toggle (Meters <-> Feet) -----
        (function () {
            var hiddenMeters = document.getElementById('ObstacleHeight');
            var displayInput = document.getElementById('ObstacleHeightDisplay');
            var unitToggle = document.getElementById('unitToggle');
            var unitText = document.getElementById('unitText');

            var M_TO_FT = 3.28084;
            var currentUnit = 'm'; // 'm' for meters, 'ft' for feet

            // Safety guard: if any element is missing, skip setup to avoid runtime errors
            if (!hiddenMeters || !displayInput || !unitToggle || !unitText) {
                return;
            }

            // Read range from MVC unobtrusive attributes if present; fallback to 0..200
            var minMetersAttr = hiddenMeters ? hiddenMeters.getAttribute('data-val-range-min') : null;
            var maxMetersAttr = hiddenMeters ? hiddenMeters.getAttribute('data-val-range-max') : null;
            var minMeters = (minMetersAttr !== null && minMetersAttr !== '') ? parseFloat(minMetersAttr) : 0;
            var maxMeters = (maxMetersAttr !== null && maxMetersAttr !== '') ? parseFloat(maxMetersAttr) : 200;

            function parseNumber(val) {
                if (val === null || val === undefined) return NaN;
                // Replace comma with dot for decimal if needed
                var s = String(val).replace(',', '.').trim();
                var n = parseFloat(s);
                return isNaN(n) ? NaN : n;
            }

            function roundTo(n, decimals) {
                var p = Math.pow(10, decimals);
                return Math.round(n * p) / p;
            }

            function updateHiddenFromDisplay() {
                var v = parseNumber(displayInput.value);
                if (isNaN(v)) {
                    hiddenMeters.value = '';
                    return;
                }
                if (currentUnit === 'm') {
                    hiddenMeters.value = v;
                } else {
                    hiddenMeters.value = roundTo(v / M_TO_FT, 6);
                }
            }

            function syncDisplayFromHidden() {
                var m = parseNumber(hiddenMeters.value);
                if (isNaN(m)) {
                    displayInput.value = '';
                    return;
                }
                if (currentUnit === 'm') {
                    displayInput.value = m;
                } else {
                    displayInput.value = roundTo(m * M_TO_FT, 2);
                }
            }

            // Dynamic validation message reflecting the selected unit and server-side bounds
            var valSpan = document.querySelector('span[data-valmsg-for="ObstacleHeight"]');
            function updateValidationMessage() {
                if (!valSpan) return;
                var hasError = valSpan.textContent && valSpan.textContent.trim().length > 0;
                if (!hasError) return;
                if (currentUnit === 'ft') {
                    var minFt = Math.round(minMeters * M_TO_FT);
                    var maxFt = Math.round(maxMeters * M_TO_FT);
                    valSpan.textContent = 'Height must be between ' + minFt + ' and ' + maxFt + ' feet.';
                } else {
                    valSpan.textContent = 'Height must be between ' + minMeters + ' and ' + maxMeters + ' meters.';
                }
            }

            function setUnit(unit) {
                if (unit === currentUnit) return;
                // Convert the displayed value to the new unit while keeping the same real height
                currentUnit = unit;
                unitText.textContent = unit === 'm' ? 'Meters' : 'Feet';
                displayInput.placeholder = unit === 'm' ? 'e.g., 2.5' : 'e.g., 8.2';
                syncDisplayFromHidden();
                updateValidationMessage();
            }

            // Initialize from server value (meters)
            syncDisplayFromHidden();

            // Events
            displayInput.addEventListener('input', function(){
                updateHiddenFromDisplay();
                updateValidationMessage();
            });
            unitToggle.addEventListener('change', function () {
                setUnit(unitToggle.checked ? 'ft' : 'm');
            });

            // Ensure meters posted on submit even if user toggled to feet
            var form = displayInput.form;
            if (form) {
                form.addEventListener('submit', function () {
                    // Update hidden from display right before submit
                    updateHiddenFromDisplay();
                });
            }

            // Observe changes to the validation span (when jQuery Validate updates it)
            if (valSpan && 'MutationObserver' in window) {
                var observer = new MutationObserver(function () { updateValidationMessage(); });
                observer.observe(valSpan, { childList: true, characterData: true, subtree: true });
            }
        })();
        // ----- End unit toggle -----

    </script>
}
